(()=>{"use strict";var r={86:(r,n,e)=>{e.d(n,{Z:()=>s});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([r.id,"body {\r\n    background-color: purple;\r\n  }\r\n#search {\r\n  \r\n  margin: auto;\r\n  border: 3px solid green;\r\n  padding: 10px;\r\n}\r\n  .kanban-heading {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    font-family: sans-serif;\r\n  }\r\n  \r\n  .kanban-board {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    font-family: sans-serif;\r\n  }\r\n  \r\n  .kanban-heading-text {\r\n    font-size: 1.8rem;\r\n    background-color: green;\r\n    padding: 0.8rem 1.7rem;\r\n    border-radius: 0.5rem;\r\n    margin: 1rem;\r\n  }\r\n  \r\n  .section {\r\n    padding: 0.6rem;\r\n    width: 30.5%;\r\n    min-width: 14rem;\r\n    min-height: 4.5rem;\r\n    border-radius: 0.3rem; \r\n  }\r\n  \r\n  #toDoSection {\r\n    background-color: red;\r\n  }\r\n  \r\n  #inProgSection {\r\n    background-color: #ffaf00;\r\n  }\r\n  \r\n  #doneSection {\r\n    background-color: #018b01;\r\n  }\r\n\r\n  .task {\r\n    background-color: white;\r\n    margin: 0.2rem 0rem 0.3rem 0rem;\r\n    border: 0.1rem solid black;\r\n    border-radius: 0.2rem;\r\n    padding: 0.5rem 0.2rem 0.5rem 2rem;\r\n  }\r\n \r\n  .submit, .submitText {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-family: sans-serif;\r\n  }\r\n  \r\n  \r\n  .submit {\r\n    width: 120px;\r\n    height: 40px;\r\n    background-color: dodgerblue;\r\n    border-radius: 6px;\r\n    margin-top: 10px;\r\n    transition: all .3s cubic-bezier(0.67, 0.17, 0.40, 0.83);\r\n  }\r\n  \r\n  .submit svg{\r\n    transform: rotate(180deg);\r\n    transition: all .5s;\r\n  }\r\n  \r\n  .submit__circle {\r\n    width: 70px;\r\n    height: 70px;\r\n    background: mediumseagreen;\r\n    border-radius: 50%;\r\n    transform: rotate(-180deg);\r\n  }\r\n  \r\n  .submit:hover {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .submitText {\r\n    color: black;\r\n    font-size: 1.2em;\r\n    transition: all 1.5s;\r\n  }\r\n\r\n  .loader {\r\n    border: 16px solid #f3f3f3; /* Light grey */\r\n    border-top: 16px solid #3498db; /* Blue */\r\n    border-radius: 50%;\r\n    width: 60px;\r\n    height: 60px;\r\n    animation: spin 2s linear infinite;\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n  }\r\n","",{version:3,sources:["webpack://./solution/styles.css"],names:[],mappings:"AAAA;IACI,wBAAwB;EAC1B;AACF;;EAEE,YAAY;EACZ,uBAAuB;EACvB,aAAa;AACf;EACE;IACE,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,uBAAuB;EACzB;;EAEA;IACE,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,uBAAuB;EACzB;;EAEA;IACE,iBAAiB;IACjB,uBAAuB;IACvB,sBAAsB;IACtB,qBAAqB;IACrB,YAAY;EACd;;EAEA;IACE,eAAe;IACf,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,qBAAqB;EACvB;;EAEA;IACE,qBAAqB;EACvB;;EAEA;IACE,yBAAyB;EAC3B;;EAEA;IACE,yBAAyB;EAC3B;;EAEA;IACE,uBAAuB;IACvB,+BAA+B;IAC/B,0BAA0B;IAC1B,qBAAqB;IACrB,kCAAkC;EACpC;;EAEA;IACE,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,uBAAuB;EACzB;;;EAGA;IACE,YAAY;IACZ,YAAY;IACZ,4BAA4B;IAC5B,kBAAkB;IAClB,gBAAgB;IAChB,wDAAwD;EAC1D;;EAEA;IACE,yBAAyB;IACzB,mBAAmB;EACrB;;EAEA;IACE,WAAW;IACX,YAAY;IACZ,0BAA0B;IAC1B,kBAAkB;IAClB,0BAA0B;EAC5B;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,YAAY;IACZ,gBAAgB;IAChB,oBAAoB;EACtB;;EAEA;IACE,0BAA0B,EAAE,eAAe;IAC3C,8BAA8B,EAAE,SAAS;IACzC,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,kCAAkC;EACpC;;EAEA;IACE,KAAK,uBAAuB,EAAE;IAC9B,OAAO,yBAAyB,EAAE;EACpC",sourcesContent:["body {\r\n    background-color: purple;\r\n  }\r\n#search {\r\n  \r\n  margin: auto;\r\n  border: 3px solid green;\r\n  padding: 10px;\r\n}\r\n  .kanban-heading {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    font-family: sans-serif;\r\n  }\r\n  \r\n  .kanban-board {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    font-family: sans-serif;\r\n  }\r\n  \r\n  .kanban-heading-text {\r\n    font-size: 1.8rem;\r\n    background-color: green;\r\n    padding: 0.8rem 1.7rem;\r\n    border-radius: 0.5rem;\r\n    margin: 1rem;\r\n  }\r\n  \r\n  .section {\r\n    padding: 0.6rem;\r\n    width: 30.5%;\r\n    min-width: 14rem;\r\n    min-height: 4.5rem;\r\n    border-radius: 0.3rem; \r\n  }\r\n  \r\n  #toDoSection {\r\n    background-color: red;\r\n  }\r\n  \r\n  #inProgSection {\r\n    background-color: #ffaf00;\r\n  }\r\n  \r\n  #doneSection {\r\n    background-color: #018b01;\r\n  }\r\n\r\n  .task {\r\n    background-color: white;\r\n    margin: 0.2rem 0rem 0.3rem 0rem;\r\n    border: 0.1rem solid black;\r\n    border-radius: 0.2rem;\r\n    padding: 0.5rem 0.2rem 0.5rem 2rem;\r\n  }\r\n \r\n  .submit, .submitText {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-family: sans-serif;\r\n  }\r\n  \r\n  \r\n  .submit {\r\n    width: 120px;\r\n    height: 40px;\r\n    background-color: dodgerblue;\r\n    border-radius: 6px;\r\n    margin-top: 10px;\r\n    transition: all .3s cubic-bezier(0.67, 0.17, 0.40, 0.83);\r\n  }\r\n  \r\n  .submit svg{\r\n    transform: rotate(180deg);\r\n    transition: all .5s;\r\n  }\r\n  \r\n  .submit__circle {\r\n    width: 70px;\r\n    height: 70px;\r\n    background: mediumseagreen;\r\n    border-radius: 50%;\r\n    transform: rotate(-180deg);\r\n  }\r\n  \r\n  .submit:hover {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .submitText {\r\n    color: black;\r\n    font-size: 1.2em;\r\n    transition: all 1.5s;\r\n  }\r\n\r\n  .loader {\r\n    border: 16px solid #f3f3f3; /* Light grey */\r\n    border-top: 16px solid #3498db; /* Blue */\r\n    border-radius: 50%;\r\n    width: 60px;\r\n    height: 60px;\r\n    animation: spin 2s linear infinite;\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n  }\r\n"],sourceRoot:""}]);const s=i},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var c=0;c<r.length;c++){var d=[].concat(r[c]);t&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=e.sources.map((function(r){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(r," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var a={},i=[],s=0;s<r.length;s++){var A=r[s],c=t.base?A[0]+t.base:A[0],d=a[c]||0,u="".concat(c," ").concat(d);a[c]=d+1;var l=e(u),m={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==l)n[l].references++,n[l].updater(m);else{var f=o(m,t);t.byIndex=s,n.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var a=t(r=r||[],o=o||{});return function(r){r=r||[];for(var i=0;i<a.length;i++){var s=e(a[i]);n[s].references--}for(var A=t(r,o),c=0;c<a.length;c++){var d=e(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=A}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}}},n={};function e(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return r[t](a,a.exports,e),a.exports}e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),(()=>{var r=e(379),n=e.n(r),t=e(795),o=e.n(t),a=e(569),i=e.n(a),s=e(565),A=e.n(s),c=e(216),d=e.n(c),u=e(589),l=e.n(u),m=e(86),f={};f.styleTagTransform=l(),f.setAttributes=A(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;let p,B=window.localStorage.getItem("tasks"),g=!1;function b(r,n=[],e=[],t={}){const o=document.createElement(r);for(let r of n)o.append(r);for(let r of e)o.classList.add(r);for(let r in t)o.setAttribute(r,t[r]);return o}!function(r){if(r){p=JSON.parse(r);for(let r in p)for(let n of p[r]){const e=b("li",[n],["task"],{draggable:"true",ondblclick:"editTask(event)",onmouseover:"mouseOverElement(event)",onmouseout:"outOfElemet(event)",onblur:"saveEditTask(event)",ondragstart:"drag(event)",onfocus:"toPink(event)"});document.getElementById(r).append(e)}}else r={todo:[],"in-progress":[],done:[]},window.localStorage.setItem("tasks",JSON.stringify(r));p=JSON.parse(window.localStorage.getItem("tasks"))}(B);const C=r=>g&&"1"===r.key||g&&"2"===r.key||g&&"3"===r.key?void 0:C;document.addEventListener("keydown",(r=>"Alt"===r.key?g=!0:C(r))),document.addEventListener("keyup",(()=>g=!1))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,